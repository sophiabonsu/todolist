{"version":3,"sources":["TaskList.js","App.js","serviceWorker.js","index.js"],"names":["TaskList","props","console","log","react_default","a","createElement","todoArray","length","map","todo","index","key","id","onClick","event","deleteItem","type","TodoList","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","target","value","setState","currentToDo","addItem","preventDefault","state","todos","concat","toConsumableArray","result","filter","className","onSubmit","htmlFor","onChange","name","placeholder","src_TaskList","Component","Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2MAceA,EAZE,SAACC,GAEd,OADAC,QAAQC,IAAIF,GAERG,EAAAC,EAAAC,cAAA,UACKL,EAAMM,UAAUC,OACbP,EAAMM,UAAUE,IAAI,SAACC,EAAMC,GACvB,OAAQP,EAAAC,EAAAC,cAAA,MAAIM,IAAKD,GAAQD,EAAKN,EAAAC,EAAAC,cAAA,UAAQO,GAAIF,EAAOG,QAAS,SAACC,GAAD,OAAWd,EAAMe,WAAWL,EAAOI,IAAQE,KAAK,QAA5E,UAAtB,OACPb,EAAAC,EAAAC,cAAA,aC0DNY,cA9Dd,SAAAA,EAAYjB,GAAM,IAAAkB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IAChBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMrB,KAQRyB,aAAe,SAAAX,GACbb,QAAQC,IAAIY,EAAMY,OAAOC,OACzBT,EAAKU,SAAS,CACZC,YAAYf,EAAMY,OAAOC,SAZXT,EAiBlBY,QAAU,SAAAhB,GACRA,EAAMiB,iBACN9B,QAAQC,IAAI,wBACkB,KAA1BgB,EAAKc,MAAMH,aACbX,EAAKU,SAAS,CACZC,YAAY,GACZI,MAAK,GAAAC,OAAAf,OAAAgB,EAAA,EAAAhB,CAAKD,EAAKc,MAAMC,OAAhB,CAAsBf,EAAKc,MAAMH,iBAvB1BX,EA+BlBH,WAAY,SAACL,EAAMI,GACjBb,QAAQC,IAAIY,EAAMY,OAAOd,IACzB,IAAMwB,EAAQlB,EAAKc,MAAMC,MAAMI,OAAO,SAAC5B,EAAKC,GAAN,OAAgBA,IAAUI,EAAMY,OAAOd,KAE7EM,EAAKU,SAAS,CACZK,MAAMG,KAlCRlB,EAAKc,MAAO,CACVC,MAAM,GACNJ,YAAY,IAJEX,wEA+Cf,OADAjB,QAAQC,IAAI,kCAAmCmB,KAAKW,MAAMC,OAExD9B,EAAAC,EAAAC,cAAA,OAAKiC,UAAU,aACbnC,EAAAC,EAAAC,cAAA,QAAMkC,SAAUlB,KAAKS,SACnB3B,EAAAC,EAAAC,cAAA,SAAOmC,QAAQ,YAAf,cACArC,EAAAC,EAAAC,cAAA,SAAQoC,SAAUpB,KAAKI,aAAciB,KAAK,WAAU1B,KAAK,OAAM2B,YAAY,oBAC3ExC,EAAAC,EAAAC,cAAA,UAAQW,KAAK,UAAb,aAGFb,EAAAC,EAAAC,cAACuC,EAAD,CAAUtC,UAAWe,KAAKW,MAAMC,MAAOlB,WAAYM,KAAKN,qBAxDzC8B,aCQHC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjD,EAAAC,EAAAC,cAACgD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.eca08762.chunk.js","sourcesContent":["import React from 'react';\n\nconst TaskList = (props) => {\n    console.log(props)\n    return (\n        <ul>\n            {props.todoArray.length ?\n                props.todoArray.map((todo, index) => {\n                    return (<li key={index}>{todo}<button id={index} onClick={(event) => props.deleteItem(index, event)} type=\"text\">Delete</button> </li>)\n                }) : <li></li>\n            }\n        </ul>\n    )\n}\nexport default TaskList","import React,{Component} from 'react';\nimport TaskList from \"./TaskList\";\n\n\nclass TodoList extends Component{\n constructor(props){\n   super(props);\n   this.state ={\n     todos:[],\n     currentToDo:\"\",\n\n    };\n }\n\n handleChange = event => {\n   console.log(event.target.value)\n   this.setState({\n     currentToDo:event.target.value\n\n   })\n };\n\n addItem = event => {\n   event.preventDefault();\n   console.log(\"addItem Method fired\")\n   if (this.state.currentToDo !==\"\"){\n     this.setState({\n       currentToDo:\"\", \n       todos:[...this.state.todos,this.state.currentToDo]\n      \n\n     })\n   }\n }\n\n\n deleteItem =(index,event) =>{\n   console.log(event.target.id)\n   const result =this.state.todos.filter((todo,index) => index !== event.target.id)\n \n   this.setState({\n     todos:result\n   });\n \n  }\n\n\n\n\n\n  render(){\n    console.log(\"console logging arrays of todos\", this.state.todos)\n    return(\n      <div className='container'>\n        <form onSubmit={this.addItem}>\n          <label htmlFor=\"taskName\">Task Name:</label>\n          <input  onChange={this.handleChange} name=\"taskName\"type=\"text\"placeholder=\"Add to do here!\"/>\n          <button type=\"submit\">Add Task</button>\n        </form>\n        \n        <TaskList todoArray={this.state.todos} deleteItem={this.deleteItem}/>\n        \n       </div>\n    );\n  }\n}\n\nexport default TodoList;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}